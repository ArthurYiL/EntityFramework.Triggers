<#@ template debug="false" hostspecific="false" language="C#" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ output extension=".cs" #>
using System;
using System.Collections.Immutable;
using Microsoft.Extensions.DependencyInjection;
#if EF_CORE
using Microsoft.EntityFrameworkCore;
namespace EntityFrameworkCore.Triggers {
#else
using System.Data.Entity;
namespace EntityFramework.Triggers {
#endif
	public class Triggerz<TEntity> where TEntity : class
	{
		private readonly IServiceProvider serviceProvider;
		public Triggerz(IServiceProvider serviceProvider) => this.serviceProvider = serviceProvider;
		private TService S<TService>() => serviceProvider.GetService<TService>();

		struct WrappedHandler<TEntry> : IEquatable<WrappedHandler<TEntry>> where TEntry : IEntry<TEntity>
		{
			private readonly Object source;
			private readonly Action<TEntry> wrapper;
			public WrappedHandler(Object source, Action<TEntry> wrapper) { this.source = source; this.wrapper = wrapper; }
			public Boolean Equals(WrappedHandler<TEntry> other) => ReferenceEquals(source, other.source);
			public void Invoke(TEntry entry) => wrapper.Invoke(entry);
		}

		private static void Add<TEntry>(ref ImmutableArray<WrappedHandler<TEntry>> array, Object source, Action<TEntry> wrapper) where TEntry : IEntry<TEntity>
		{
			ImmutableArray<WrappedHandler<TEntry>> initial, computed;
			do
			{
				initial = ImmutableInterlockedRead(ref array);
				computed = initial.Add(new WrappedHandler<TEntry>(source, wrapper));
			}
			while (initial != ImmutableInterlocked.InterlockedCompareExchange(ref array, computed, initial));
		}

		private static void Remove<TEntry>(ref ImmutableArray<WrappedHandler<TEntry>> array, Object source) where TEntry : IEntry<TEntity>
		{
			ImmutableArray<WrappedHandler<TEntry>> initial, computed;
			do
			{
				initial = ImmutableInterlockedRead(ref array);
				var index = initial.LastIndexOf(new WrappedHandler<TEntry>(source, null));
				if (index == -1)
					return;
				computed = initial.RemoveAt(index);
			}
			while (initial != ImmutableInterlocked.InterlockedCompareExchange(ref array, computed, initial));
		}

		private static ImmutableArray<WrappedHandler<TEntry>> ImmutableInterlockedRead<TEntry>(ref ImmutableArray<WrappedHandler<TEntry>> array) where TEntry : IEntry<TEntity> =>
			ImmutableInterlocked.InterlockedCompareExchange(ref array, ImmutableArray<WrappedHandler<TEntry>>.Empty, ImmutableArray<WrappedHandler<TEntry>>.Empty);

<#
foreach (var @event in new [] { "Inserting", "InsertFailed", "Inserted", "Deleting", "DeleteFailed", "Deleted", "Updating", "UpdateFailed", "Updated" })
{
		var camelCase = Char.ToLower(@event[0]) + @event.Substring(1);
#>
		private ImmutableArray<WrappedHandler<I<#= @event #>Entry<TEntity>>> <#= camelCase #> = ImmutableArray<WrappedHandler<I<#= @event #>Entry<TEntity>>>.Empty;
		
		internal void Raise<#= @event #>(I<#= @event #>Entry<TEntity> entry)
		{
			var latestHandlers = ImmutableInterlockedRead(ref <#= camelCase #>);
			foreach (var wrappedHandler in latestHandlers)
				wrappedHandler.Invoke(entry);
		}
		
		public void <#= @event #>Add(Action<I<#= @event #>Entry<TEntity>> handler) =>
			Add(ref <#=camelCase#>, handler, handler);

<#
	for (var i = 1; i != 3; i++)
	{
		var suffixes = Enumerable.Range(0, i).Select(x => i == 1 ? "" : (x + 1).ToString());
		var types = suffixes.Select(x => "TService" + x);
		var typeArgs = String.Join(", ", types);
		var serviceResolveCalls = String.Join(", ", types.Select(x => $"S<{x}>()"));
		var invokeParams = String.Join(", ", suffixes.Select(x => "TService" + x + " arg" + x));
		var invokeArgs = String.Join(", ", suffixes.Select(x => "service" + x));
#>
		public void <#= @event #>Add<<#= typeArgs #>>(Action<I<#= @event #>Entry<TEntity>, <#= typeArgs #>> handler) =>
			Add(ref <#=camelCase#>, handler, entry => handler.Invoke(entry, <#=serviceResolveCalls#>));

		public void <#= @event #>Remove<<#= typeArgs #>>(Action<I<#= @event #>Entry<TEntity>, <#= typeArgs #>> handler) =>
			Remove(ref <#=camelCase#>, handler);

<#
	}
#>

<#
}
#>
	}
}